name: Multi-Agent Project Automation

on:
  pull_request:
    types: [opened, edited, closed, synchronize]
  issues:
    types: [opened, edited, closed, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  auto-assignment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Auto-assign reviewers based on labels
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            let reviewers = [];
            const labels = pr.labels.map(label => label.name);

            // Auto-assignment based on domain expertise
            if (labels.includes('backend')) {
              reviewers.push('backend-expert');
            }
            if (labels.includes('frontend')) {
              reviewers.push('frontend-expert');
            }
            if (labels.includes('marketing')) {
              reviewers.push('marketing-expert');
            }
            if (labels.includes('automation')) {
              reviewers.push('automation-manager');
            }

            // Always include project manager for coordination
            reviewers.push('project-coordinator');

            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: reviewers.filter(r => r !== pr.user.login)
              });
            }

  project-sync:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'issues'
    steps:
      - name: Sync with project board
        uses: actions/github-script@v6
        with:
          script: |
            // Get project board ID for "Multi-Agent Test Project - Phase 1"
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const targetProject = projects.find(p => p.name === 'Multi-Agent Test Project - Phase 1');
            if (!targetProject) {
              console.log('Project board not found');
              return;
            }

            // Auto-move cards based on PR status
            if (github.event_name === 'pull_request') {
              const action = context.payload.action;
              let columnName = '';

              switch(action) {
                case 'opened':
                  columnName = 'In Progress';
                  break;
                case 'closed':
                  if (context.payload.pull_request.merged) {
                    columnName = 'Done';
                  } else {
                    columnName = 'Todo';
                  }
                  break;
              }

              if (columnName) {
                console.log(`Moving to ${columnName} column`);
                // Additional project board API calls would go here
              }
            }

  dependency-notifications:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Notify dependent agents
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const labels = pr.labels.map(label => label.name);
            let notifications = [];

            // Define dependency chains
            if (labels.includes('backend')) {
              notifications.push({
                agent: 'frontend-expert',
                message: `üîÑ Backend PR #${context.issue.number} merged! Frontend implementation can now proceed with latest API specs.`
              });
            }

            if (labels.includes('frontend')) {
              notifications.push({
                agent: 'marketing-expert',
                message: `‚ú® Frontend PR #${context.issue.number} merged! UI/UX assets ready for marketing materials creation.`
              });
            }

            // Create notification issues for dependent agents
            for (const notification of notifications) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ü§ñ Agent Notification: Dependency Ready for ${notification.agent}`,
                body: notification.message,
                assignees: [notification.agent],
                labels: ['notification', 'dependency']
              });
            }

  quality-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      
      - name: Validate deliverable structure
        run: |
          echo "üîç Validating deliverable structure..."
          
          # Check if deliverables directory exists
          if [ ! -d "deliverables" ]; then
            echo "‚ùå Missing deliverables/ directory"
            exit 1
          fi
          
          # Validate file naming convention
          for file in deliverables/*.md; do
            if [[ ! "$file" =~ ^deliverables/[a-z-]+\.(md)$ ]]; then
              echo "‚ö†Ô∏è File $file doesn't follow naming convention"
            fi
          done
          
          echo "‚úÖ Structure validation complete"

      - name: Check content quality
        run: |
          echo "üìù Checking content quality standards..."
          
          for file in deliverables/*.md; do
            if [ -f "$file" ]; then
              lines=$(wc -l < "$file")
              if [ "$lines" -lt 50 ]; then
                echo "‚ö†Ô∏è $file may be too short ($lines lines)"
              fi
              
              # Check for basic markdown structure
              if ! grep -q "^#" "$file"; then
                echo "‚ö†Ô∏è $file missing header structure"
              fi
            fi
          done
          
          echo "‚úÖ Content quality check complete"

  progress-tracking:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Update progress metrics
        uses: actions/github-script@v6
        with:
          script: |
            // Track overall project progress
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });

            const totalIssues = issues.filter(issue => !issue.pull_request).length;
            const closedIssues = issues.filter(issue => !issue.pull_request && issue.state === 'closed').length;
            const totalPRs = prs.length;
            const mergedPRs = prs.filter(pr => pr.merged_at).length;

            const issueProgress = Math.round((closedIssues / totalIssues) * 100) || 0;
            const prProgress = Math.round((mergedPRs / totalPRs) * 100) || 0;

            console.log(`üìä Project Progress:
            - Issues: ${closedIssues}/${totalIssues} (${issueProgress}%)
            - PRs: ${mergedPRs}/${totalPRs} (${prProgress}%)
            `);

            // Update project README with progress (if exists)
            try {
              const { data: readme } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md'
              });
              
              console.log('‚úÖ Progress metrics updated');
            } catch (e) {
              console.log('üìù No README.md found to update');
            }