# üê≥ Docker Compose Configuration for Multi-Agent System
# Production-ready container orchestration

version: '3.8'

services:
  # ==================== API SERVICE ====================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: multi-agent-api
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "3000:3000"
    
    # Environment configuration
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - API_VERSION=v1
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Networks
    networks:
      - multi-agent-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== FRONTEND SERVICE ====================
  frontend:
    image: nginx:alpine
    container_name: multi-agent-frontend
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "8080:80"
    
    # Volume mounts
    volumes:
      - ./public:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    
    # Dependencies
    depends_on:
      api:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m
    
    # Networks
    networks:
      - multi-agent-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ==================== MONITORING SERVICE ====================
  monitoring:
    image: prom/prometheus:latest
    container_name: multi-agent-monitoring
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "9090:9090"
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Command configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    
    # Dependencies
    depends_on:
      - api
      - frontend
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Networks
    networks:
      - multi-agent-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==================== NETWORKS ====================
networks:
  multi-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==================== VOLUMES ====================
volumes:
  prometheus-data:
    driver: local